07/05/20 21:43,henry-lp-SonarQubeRepairTests-master,SonarQubeRepair,--- a/testcases/CodeFactory.java
+++ b/testcases/CodeFactory.java
@@ -4,23 +4,13 @@
  * Spoon is available either under the terms of the MIT License (see LICENSE-MIT.txt) of the Cecill-C License (see LICENSE-CECILL-C.txt). You as the user are entitled to choose the terms under which to adopt Spoon.
  */
 package spoon.reflect.factory;
-
-import spoon.SpoonException;
-import spoon.reflect.code.CtExpression;
-import spoon.reflect.code.CtNewClass;
-import spoon.reflect.declaration.CtClass;
-import spoon.reflect.declaration.CtConstructor;
-import spoon.reflect.declaration.CtType;
-import spoon.reflect.reference.CtTypeReference;
 import java.util.Arrays;
-
+import java.util.function.Function;
+import spoon.reflect.code.CtExpression;
+import spoon.reflect.reference.CtTypeReference;
 public class CodeFactory {
-
-	public void createNewClass(CtExpression<?>...parameters) {
-		Arrays.stream(parameters).map(x -> x.getType());
-		
-		parameters.toString(); // Noncompliant
-	}
-
-}
-
+    public void createNewClass(CtExpression<?>... parameters) {
+        Arrays.stream(parameters).map(( x) -> x.getType());
+        Arrays.toString(parameters);
+    }
+}
\ No newline at end of file
,,tailp-Surface-Laptop
07/05/20 21:43,henry-lp-SonarQubeRepairTests-master,SonarQubeRepair,--- a/testcases/ArrayHashCodeAndToString.java
+++ b/testcases/ArrayHashCodeAndToString.java
@@ -1,29 +1,30 @@
-// Test for rule s2116
-
+/* Test for rule s2116 */
 public class ArrayHashCodeAndToString {
+    // Tests from https://rules.sonarsource.com/java/type/Bug/RSPEC-2116
+    public static void main(String[] args) {
+        String argStr = Arrays.toString(args);// Noncompliant
 
-	// Tests from https://rules.sonarsource.com/java/type/Bug/RSPEC-2116
-	public static void main( String[] args ) {
-		String argStr = args.toString(); // Noncompliant
-		int argHash = args.hashCode(); // Noncompliant
-	}
+        int argHash = Arrays.hashCode(args);// Noncompliant
 
-	// Tests from https://github.com/SonarSource/sonar-java/blob/master/java-checks-test-sources/src/main/java/checks/ArrayHashCodeAndToStringCheck.java
-	void method(String[] args, String string) {
-		Class class1 = args.getClass();
-		String str = string.toString();
-		int hash = string.hashCode();
-	}
+    }
 
-	// Aditional tests
-	public void foo(String[] args) {
-		String[] array1 = {"F", "O", "O"};
-		System.out.println(array1.toString()); // Noncompliant
-		varargsTest(1, 2, 3);
-	}
+    // Tests from https://github.com/SonarSource/sonar-java/blob/master/java-checks-test-sources/src/main/java/checks/ArrayHashCodeAndToStringCheck.java
+    void method(String[] args, String string) {
+        Class class1 = args.getClass();
+        String str = string.toString();
+        int hash = string.hashCode();
+    }
 
-	private void varargsTest(int... array2) {
-		String a = array2.toString(); // Noncompliant
-	}
+    // Aditional tests
+    public void foo(String[] args) {
+        String[] array1 = new String[]{ "F", "O", "O" };
+        System.out.println(Arrays.toString(array1));// Noncompliant
 
-}
+        varargsTest(1, 2, 3);
+    }
+
+    private void varargsTest(int... array2) {
+        String a = Arrays.toString(array2);// Noncompliant
+
+    }
+}
\ No newline at end of file
,,tailp-Surface-Laptop
