{"dateStr":"07/05/20 21:43","date":{"$date":"2020-05-07T21:43:26.508Z"},"repositoryId":"henry-lp-SonarQubeRepairTests-master","toolname":"SonarQubeRepair","diff":"--- a/testcases/CodeFactory.java\n+++ b/testcases/CodeFactory.java\n@@ -4,23 +4,13 @@\n  * Spoon is available either under the terms of the MIT License (see LICENSE-MIT.txt) of the Cecill-C License (see LICENSE-CECILL-C.txt). You as the user are entitled to choose the terms under which to adopt Spoon.\n  */\n package spoon.reflect.factory;\n-\n-import spoon.SpoonException;\n-import spoon.reflect.code.CtExpression;\n-import spoon.reflect.code.CtNewClass;\n-import spoon.reflect.declaration.CtClass;\n-import spoon.reflect.declaration.CtConstructor;\n-import spoon.reflect.declaration.CtType;\n-import spoon.reflect.reference.CtTypeReference;\n import java.util.Arrays;\n-\n+import java.util.function.Function;\n+import spoon.reflect.code.CtExpression;\n+import spoon.reflect.reference.CtTypeReference;\n public class CodeFactory {\n-\n-\tpublic void createNewClass(CtExpression<?>...parameters) {\n-\t\tArrays.stream(parameters).map(x -> x.getType());\n-\t\t\n-\t\tparameters.toString(); // Noncompliant\n-\t}\n-\n-}\n-\n+    public void createNewClass(CtExpression<?>... parameters) {\n+        Arrays.stream(parameters).map(( x) -> x.getType());\n+        Arrays.toString(parameters);\n+    }\n+}\n\\ No newline at end of file\n","filepath":"","hostname":"tailp-Surface-Laptop"}
{"dateStr":"07/05/20 21:43","date":{"$date":"2020-05-07T21:43:26.508Z"},"repositoryId":"henry-lp-SonarQubeRepairTests-master","toolname":"SonarQubeRepair","diff":"--- a/testcases/ArrayHashCodeAndToString.java\n+++ b/testcases/ArrayHashCodeAndToString.java\n@@ -1,29 +1,30 @@\n-// Test for rule s2116\n-\n+/* Test for rule s2116 */\n public class ArrayHashCodeAndToString {\n+    // Tests from https://rules.sonarsource.com/java/type/Bug/RSPEC-2116\n+    public static void main(String[] args) {\n+        String argStr = Arrays.toString(args);// Noncompliant\n \n-\t// Tests from https://rules.sonarsource.com/java/type/Bug/RSPEC-2116\n-\tpublic static void main( String[] args ) {\n-\t\tString argStr = args.toString(); // Noncompliant\n-\t\tint argHash = args.hashCode(); // Noncompliant\n-\t}\n+        int argHash = Arrays.hashCode(args);// Noncompliant\n \n-\t// Tests from https://github.com/SonarSource/sonar-java/blob/master/java-checks-test-sources/src/main/java/checks/ArrayHashCodeAndToStringCheck.java\n-\tvoid method(String[] args, String string) {\n-\t\tClass class1 = args.getClass();\n-\t\tString str = string.toString();\n-\t\tint hash = string.hashCode();\n-\t}\n+    }\n \n-\t// Aditional tests\n-\tpublic void foo(String[] args) {\n-\t\tString[] array1 = {\"F\", \"O\", \"O\"};\n-\t\tSystem.out.println(array1.toString()); // Noncompliant\n-\t\tvarargsTest(1, 2, 3);\n-\t}\n+    // Tests from https://github.com/SonarSource/sonar-java/blob/master/java-checks-test-sources/src/main/java/checks/ArrayHashCodeAndToStringCheck.java\n+    void method(String[] args, String string) {\n+        Class class1 = args.getClass();\n+        String str = string.toString();\n+        int hash = string.hashCode();\n+    }\n \n-\tprivate void varargsTest(int... array2) {\n-\t\tString a = array2.toString(); // Noncompliant\n-\t}\n+    // Aditional tests\n+    public void foo(String[] args) {\n+        String[] array1 = new String[]{ \"F\", \"O\", \"O\" };\n+        System.out.println(Arrays.toString(array1));// Noncompliant\n \n-}\n+        varargsTest(1, 2, 3);\n+    }\n+\n+    private void varargsTest(int... array2) {\n+        String a = Arrays.toString(array2);// Noncompliant\n+\n+    }\n+}\n\\ No newline at end of file\n","filepath":"","hostname":"tailp-Surface-Laptop"}
